!function(n){var t={};function c(e){if(t[e])return t[e].exports;var l=t[e]={i:e,l:!1,exports:{}};return n[e].call(l.exports,l,l.exports,c),l.l=!0,l.exports}c.m=n,c.c=t,c.d=function(n,t,e){c.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},c.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},c.t=function(n,t){if(1&t&&(n=c(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(c.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var l in n)c.d(e,l,function(t){return n[t]}.bind(null,l));return e},c.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return c.d(t,"a",t),t},c.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},c.p="",c(c.s=6)}({6:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/clipboard-polyfill/dist/clipboard-polyfill.esm.js\nfunction t(t, e, n, r) {\n  return new (n || (n = Promise))(function (o, i) {\n    function a(t) {\n      try {\n        u(r.next(t));\n      } catch (t) {\n        i(t);\n      }\n    }\n\n    function c(t) {\n      try {\n        u(r.throw(t));\n      } catch (t) {\n        i(t);\n      }\n    }\n\n    function u(t) {\n      t.done ? o(t.value) : new n(function (e) {\n        e(t.value);\n      }).then(a, c);\n    }\n\n    u((r = r.apply(t, e || [])).next());\n  });\n}\n\nfunction e(t, e) {\n  var n,\n      r,\n      o,\n      i,\n      a = {\n    label: 0,\n    sent: function () {\n      if (1 & o[0]) throw o[1];\n      return o[1];\n    },\n    trys: [],\n    ops: []\n  };\n  return i = {\n    next: c(0),\n    throw: c(1),\n    return: c(2)\n  }, \"function\" == typeof Symbol && (i[Symbol.iterator] = function () {\n    return this;\n  }), i;\n\n  function c(i) {\n    return function (c) {\n      return function (i) {\n        if (n) throw new TypeError(\"Generator is already executing.\");\n\n        for (; a;) try {\n          if (n = 1, r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done) return o;\n\n          switch (r = 0, o && (i = [2 & i[0], o.value]), i[0]) {\n            case 0:\n            case 1:\n              o = i;\n              break;\n\n            case 4:\n              return a.label++, {\n                value: i[1],\n                done: !1\n              };\n\n            case 5:\n              a.label++, r = i[1], i = [0];\n              continue;\n\n            case 7:\n              i = a.ops.pop(), a.trys.pop();\n              continue;\n\n            default:\n              if (!(o = (o = a.trys).length > 0 && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {\n                a = 0;\n                continue;\n              }\n\n              if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {\n                a.label = i[1];\n                break;\n              }\n\n              if (6 === i[0] && a.label < o[1]) {\n                a.label = o[1], o = i;\n                break;\n              }\n\n              if (o && a.label < o[2]) {\n                a.label = o[2], a.ops.push(i);\n                break;\n              }\n\n              o[2] && a.ops.pop(), a.trys.pop();\n              continue;\n          }\n\n          i = e.call(t, a);\n        } catch (t) {\n          i = [6, t], r = 0;\n        } finally {\n          n = o = 0;\n        }\n\n        if (5 & i[0]) throw i[1];\n        return {\n          value: i[0] ? i[1] : void 0,\n          done: !0\n        };\n      }([i, c]);\n    };\n  }\n}\n\nvar n = [\"text/plain\", \"text/html\"];\n\nvar r = function () {\n  (console.warn || console.log).call(arguments);\n}.bind(console, \"[clipboard-polyfill]\"),\n    o = !0;\n\nvar i = function () {\n  function t() {\n    this.m = {};\n  }\n\n  return t.prototype.setData = function (t, e) {\n    o && -1 === n.indexOf(t) && r(\"Unknown data type: \" + t, \"Call clipboard.suppressWarnings() to suppress this warning.\"), this.m[t] = e;\n  }, t.prototype.getData = function (t) {\n    return this.m[t];\n  }, t.prototype.forEach = function (t) {\n    for (var e in this.m) t(this.m[e], e);\n  }, t;\n}(),\n    a = function (t) {},\n    c = !0;\n\nvar u = function () {\n  (console.warn || console.log).apply(console, arguments);\n}.bind(\"[clipboard-polyfill]\"),\n    s = \"text/plain\";\n\nfunction l(t) {\n  a = t;\n}\n\nfunction d() {\n  c = !1, o = !1;\n}\n\nfunction f(n) {\n  return t(this, void 0, void 0, function () {\n    var t;\n    return e(this, function (e) {\n      if (c && !n.getData(s) && u(\"clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call clipboard.suppressWarnings() to suppress this warning.\"), C()) {\n        if (function (t) {\n          var e = t.getData(s);\n          if (void 0 !== e) return window.clipboardData.setData(\"Text\", e);\n          throw new Error(\"No `text/plain` value was specified.\");\n        }(n)) return [2];\n        throw new Error(\"Copying failed, possibly because the user rejected it.\");\n      }\n\n      if (g(n)) return a(\"regular execCopy worked\"), [2];\n      if (navigator.userAgent.indexOf(\"Edge\") > -1) return a('UA \"Edge\" => assuming success'), [2];\n      if (x(document.body, n)) return a(\"copyUsingTempSelection worked\"), [2];\n      if (function (t) {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"style\", \"-webkit-user-select: text !important\"), e.textContent = \"temporary element\", document.body.appendChild(e);\n        var n = x(e, t);\n        return document.body.removeChild(e), n;\n      }(n)) return a(\"copyUsingTempElem worked\"), [2];\n      if (void 0 !== (t = n.getData(s)) && function (t) {\n        a(\"copyTextUsingDOM\");\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"style\", \"-webkit-user-select: text !important\");\n        var n = e;\n        e.attachShadow && (a(\"Using shadow DOM.\"), n = e.attachShadow({\n          mode: \"open\"\n        }));\n        var r = document.createElement(\"span\");\n        r.innerText = t, n.appendChild(r), document.body.appendChild(e), D(r);\n        var o = document.execCommand(\"copy\");\n        return E(), document.body.removeChild(e), o;\n      }(t)) return a(\"copyTextUsingDOM worked\"), [2];\n      throw new Error(\"Copy command failed.\");\n    });\n  });\n}\n\nfunction p(n) {\n  return t(this, void 0, void 0, function () {\n    return e(this, function (t) {\n      return navigator.clipboard && navigator.clipboard.writeText ? (a(\"Using `navigator.clipboard.writeText()`.\"), [2, navigator.clipboard.writeText(n)]) : [2, f(T(n))];\n    });\n  });\n}\n\nfunction v() {\n  return t(this, void 0, void 0, function () {\n    var t;\n    return e(this, function (e) {\n      switch (e.label) {\n        case 0:\n          return t = T, [4, h()];\n\n        case 1:\n          return [2, t.apply(void 0, [e.sent()])];\n      }\n    });\n  });\n}\n\nfunction h() {\n  return t(this, void 0, void 0, function () {\n    return e(this, function (t) {\n      if (navigator.clipboard && navigator.clipboard.readText) return a(\"Using `navigator.clipboard.readText()`.\"), [2, navigator.clipboard.readText()];\n      if (C()) return a(\"Reading text using IE strategy.\"), [2, k()];\n      throw new Error(\"Read is not supported in your browser.\");\n    });\n  });\n}\n\nvar b = !1;\n\nfunction m() {\n  b || (c && u('The deprecated default object of `clipboard-polyfill` was called. Please switch to `import * as clipboard from \"clipboard-polyfill\"` and see https://github.com/lgarron/clipboard-polyfill/issues/101 for more info.'), b = !0);\n}\n\nvar w = {\n  DT: i,\n  setDebugLog: function (t) {\n    return m(), l(t);\n  },\n  suppressWarnings: function () {\n    return m(), d();\n  },\n  write: function (n) {\n    return t(this, void 0, void 0, function () {\n      return e(this, function (t) {\n        return m(), [2, f(n)];\n      });\n    });\n  },\n  writeText: function (n) {\n    return t(this, void 0, void 0, function () {\n      return e(this, function (t) {\n        return m(), [2, p(n)];\n      });\n    });\n  },\n  read: function () {\n    return t(this, void 0, void 0, function () {\n      return e(this, function (t) {\n        return m(), [2, v()];\n      });\n    });\n  },\n  readText: function () {\n    return t(this, void 0, void 0, function () {\n      return e(this, function (t) {\n        return m(), [2, h()];\n      });\n    });\n  }\n},\n    y = function () {\n  this.success = !1;\n};\n\nfunction g(t) {\n  var e = new y(),\n      n = function (t, e, n) {\n    a(\"listener called\"), t.success = !0, e.forEach(function (e, r) {\n      var o = n.clipboardData;\n      o.setData(r, e), r === s && o.getData(r) !== e && (a(\"setting text/plain failed\"), t.success = !1);\n    }), n.preventDefault();\n  }.bind(this, e, t);\n\n  document.addEventListener(\"copy\", n);\n\n  try {\n    document.execCommand(\"copy\");\n  } finally {\n    document.removeEventListener(\"copy\", n);\n  }\n\n  return e.success;\n}\n\nfunction x(t, e) {\n  D(t);\n  var n = g(e);\n  return E(), n;\n}\n\nfunction D(t) {\n  var e = document.getSelection();\n\n  if (e) {\n    var n = document.createRange();\n    n.selectNodeContents(t), e.removeAllRanges(), e.addRange(n);\n  }\n}\n\nfunction E() {\n  var t = document.getSelection();\n  t && t.removeAllRanges();\n}\n\nfunction T(t) {\n  var e = new i();\n  return e.setData(s, t), e;\n}\n\nfunction C() {\n  return \"undefined\" == typeof ClipboardEvent && void 0 !== window.clipboardData && void 0 !== window.clipboardData.setData;\n}\n\nfunction k() {\n  return t(this, void 0, void 0, function () {\n    var t;\n    return e(this, function (e) {\n      if (\"\" === (t = window.clipboardData.getData(\"Text\"))) throw new Error(\"Empty clipboard or could not read plain text from clipboard\");\n      return [2, t];\n    });\n  });\n}\n\n/* harmony default export */ var clipboard_polyfill_esm = (w);\n\n// CONCATENATED MODULE: ./app/module/_blog-content/blog-content.js\nvar insert = function insert(parent, child) {\n  parent.insertAdjacentElement('afterbegin', child);\n};\n\nfunction asideToggle(event) {\n  if (event.target.classList.contains('blog-aside__title')) {\n    if (event.target.nextElementSibling.style.display === 'none') {\n      event.target.nextElementSibling.style.display = 'flex';\n    } else {\n      event.target.nextElementSibling.style.display = 'none';\n    }\n  }\n}\n\n\n// CONCATENATED MODULE: ./app/js/blog.js\n\n\nvar formSearch = document.getElementsByClassName('blog-aside__search');\nvar jsBlogPost = document.querySelectorAll('.js-blog-post');\nvar blogAside = document.querySelector('.blog-aside');\nvar blogInner = document.querySelector('.blog__inner');\nvar search = document.getElementById('search');\nvar blogAsideBlockBtn = document.querySelector('.blog-aside__block-btn'); // const inputWrapper = document.getElementsByClassName('input-wrapper')\n// let searchSelectionLength\n// TODO neeeeeeed  Animation and close other blocks title\n\nfunction breakpointOnBlog() {\n  if (window.innerWidth <= 700) {\n    insert(blogInner, formSearch);\n    blogAside.addEventListener('click', asideToggle);\n    jsBlogPost.forEach(function (item) {\n      item.style.display = 'none';\n    });\n  } else {\n    insert(blogAside, formSearch);\n    blogAside.removeEventListener('click', asideToggle);\n    jsBlogPost.forEach(function (item) {\n      item.style.display = 'flex';\n    });\n  }\n}\n\nwindow.addEventListener('resize', breakpointOnBlog);\n\nif (window.innerWidth <= 700) {\n  window.removeEventListener('resize', breakpointOnBlog);\n} // Пока что не в состоянии реализовать данную идею,\n// Идея заключалася в том что при вводе текста в инпут каждой букве дается тень которая исщезает после 2секунд\n// проблема в том что я не могу реализовать нормальное удаления и видиления текста а также вместа полного инпута я получаю ограничений инпут где то около 30 симовлов\n// Идея очень хорошая но знаний маловато к сожелению и еще у меня очень тяжелий код для понимания нужно как то избавлятся и не абстрактний \n// TODO search input text-shadow\n// const textInput\n// console.log(inputWrapper)\n// Problem width repeat textInput need refactoring\n// search.addEventListener('focus', function () {\n//   const textInput = document.getElementById('js-input-wrapper__letters')\n//   blogAsideBlockBtn.classList.add('blog-aside__block-btn--active')\n//   if (textInput === null) {\n//     this.insertAdjacentHTML('afterend', `<div id=\"js-input-wrapper__letters\" class=\"input-wrapper__letters\"></div>`)\n//   }\n// })\n// search.addEventListener('blur', function () {\n//   blogAsideBlockBtn.classList.remove('blog-aside__block-btn--active')\n// })\n// search.addEventListener('keydown', function () {\n//   const textInput = document.getElementById('js-input-wrapper__letters')\n//   const textInputLetterArray = [...textInput.children]\n//   // Так как я не смог придумать что делать с текстом блока когда заходит за пределы блока то я решил огранчить сам инпут и теперь заголовки блога не должни превишать 30символов и все ради тени...Тени наше все!\n//   const key = ['Enter','ArrowUp','ArrowDown', 'ArrowLeft', 'ArrowRight', 'Command', 'Meta', 'Backspace', 'End', 'Delete', 'Shift', 'CapsLock', 'Control', 'Alt', 'Insert', 'Home', 'NumLock', 'NumLockPause', 'ScrollLock']\n//   if (event.altKey ||\n//     event.ctrlKey ||\n//     (event.key == 'Command') ||\n//     (event.key == 'Meta') && event.key === '*') {\n//     return false\n//   } else if (((!key.includes(event.key)) ||\n//     (event.shiftKey && event.key === '*')) && (this.value.length < 30)) {\n//     const span = document.createElement('span');\n//     if (event.keyCode == 32) {\n//       span.classList.add('input-wrapper__space')\n//     } else {\n//       span.classList.add('input-wrapper__letter')\n//     }\n//     span.textContent = event.key\n//     if (textInput !== null) {\n//       textInput.append(span)\n//       setTimeout(()=> {\n//         console.log(textInputLetterArray[0])\n//         textInputLetterArray[0].remove()\n//       }, 2100)\n//     } else {\n//       return false\n//     }\n//   }\n// if (event.keyCode === 8 &&\n//   textInputLetterArray.length > 0) {\n//   console.log(searchSelectionLength)\n//   if ( searchSelectionLength === 1) {\n//     console.log(textInputLetterArray)\n//     textInputLetterArray[textInputLetterArray.length - searchSelectionLength].remove()\n//   } else {\n//     textInputLetterArray = textInputLetterArray.splice(textInputLetterArray.length - 1, searchSelectionLength)\n//     console.log(textInputLetterArray)\n//   }\n// } \n// if (document.getSelection && event.keyCode == 8) {\n//   const selection = document.getSelection()\n//   console.log(selection.anchorNode.data)\n//   let childs = selection.selectAllChildren(textInput)\n//   console.log(childs)\n//   // selection.deleteFromDocument()\n// } \n// else if (event.keyCode === 8 &&\n//   textInputLetter !== null &&\n//   textInputLetterArray.length > 0) {\n//   const selection = document.getSelection()\n//   selection.deleteFromDocument()\n//   console.log('delete select part')\n// }\n// })\n// // Its working bugs \n// // not working ctrl + z\n// // selectAll + Backspace \n// search.addEventListener('cut', function () {\n//   const textInput = document.getElementById('js-input-wrapper__letters')\n//   textInput.remove()\n// })\n// search.addEventListener('paste', function (e) {\n//   const textInput = document.getElementById('js-input-wrapper__letters')\n//   clipboard.readText()\n//     .then(text => {\n//       const regLetter = /./g\n//       const textArray = text.match(regLetter)\n//       return textArray.join('')\n//     })\n//     .then(textArray => {\n//       const span = document.createElement('span')\n//       span.setAttribute('class', 'input-wrapper__letter')\n//       span.textContent = textArray\n//       if (textInput !== null) {\n//         textInput.append(span)\n//       } else {\n//         return false\n//       }\n//     })\n//     .catch(err => {\n//       console.log('Something went wrong', err);\n//     })\n// })\n// document.addEventListener('selectionchange', calculateSearchSelectionLength)\n// function calculateSearchSelectionLength() {\n//   if(search) {\n//     const selection = document.getSelection().toString()\n//     searchSelectionLength = selection.substring(0).length || 1\n//     return searchSelectionLength\n//   }\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")}});